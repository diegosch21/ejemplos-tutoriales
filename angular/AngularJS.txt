********AngularJS*********  (MVW Javascript) HTML enhanced for web apps!

https://angularjs.org/		https://docs.angularjs.org/guide		http://docs.angularjs.org/api

 - Superheroic JavaScript MVW Framework
 - A complete client-side solution
 - Angular es lo que HTML hubiera sido, si hubiera sido diseñado para construir aplicaciones web
	- Declarative templates with data-binding, MVW, MVVM, MVC, dependency injection and great testability story all implemented with pure client-side JavaScript! 
 
 => VER Investigacion/AngularJS/
		-> Advanced tips & tricks using AngularJS.pdf <--
		-> AngularJS Basics with Example.pdf
		-> The Art of AngularJS.pdf  <---
		- Single Page Application (SPA) using AngularJS.ppt
		- Introduction to AngularJS.ppt
  
-> Instalación - uso:
	CDN: https://ajax.googleapis.com/ajax/libs/angularjs/1.3.11/angular.js
	Bower: > bower install angular#1.3.11
	npm: > npm install angular@1.3.11
-> Extras - Modulos:	
	https://code.angularjs.org/1.3.11/
 
===============================================================================================================================

*********** DEFINICIONES, CONCEPTOS   *****************************************************************************************

-> Del sitio oficial.... https://angularjs.org/

	* Why AngularJS?
		HTML is great for declaring static documents, but it falters when we try to use it for declaring dynamic views in web-applications. 
		AngularJS lets you extend HTML vocabulary for your application. 
		The resulting environment is extraordinarily expressive, readable, and quick to develop.
	* Alternatives	
		Other frameworks deal with HTML’s shortcomings by either abstracting away HTML, CSS, and/or JavaScript or by providing an imperative way for manipulating the DOM. 
		Neither of these address the root problem that HTML was not designed for dynamic views.
	* Extensibility
		AngularJS is a toolset for building the framework most suited to your application development. 
		It is fully extensible and works well with other libraries. Every feature can be modified or replaced to suit your unique development workflow and feature needs.	
	
	*** Add some control ***	
		* Data Binding 	https://docs.angularjs.org/guide/databinding
			Data-binding is an automatic way of updating the view whenever the model changes, as well as updating the model whenever the view changes. 
			This is awesome because it eliminates DOM manipulation from the list of things you have to worry about	
		* Controller 
			Controllers are the behavior behind the DOM elements.
			AngularJS lets you express the behavior in a clean readable form without the usual boilerplate of updating the DOM, registering callbacks or watching model changes	
		* Plain JavaScript 
			Unlike other frameworks, there is no need to inherit from proprietary types in order to wrap the model in accessors methods. 
			Angular models are plain old JavaScript objects. This makes your code easy to test, maintain, reuse, and again free from boilerplate.
	
	*** Wire up a Backend ***
		* Deep Linking 
			A deep link reflects where the user is in the app, this is useful so users can bookmark and email links to locations within apps. 
			Round trip apps get this automatically, but AJAX apps by their nature do not. AngularJS combines the benefits of deep link with desktop app-like behavior.
		* Form Validation
			Client-side form validation is an important part of great user experience. AngularJS lets you declare the validation rules of the form without having to write JavaScript code. Write less code, go have beer sooner.
		* Server Communication
			AngularJS provides built-in services on top of XHR as well as various other backends using third party libraries. Promises further simplify your code by handling asynchronous return of data. 
			
	*** Create Components ***
		* Directives
			Directives is a unique and powerful feature available only in Angular. Directives let you invent new HTML syntax, specific to your application.
		* Reusable Components
			We use directives to create reusable components. A component allows you to hide complex DOM structure, CSS, and behavior. This lets you focus either on what the application does or how the application looks separately.
		* Localization
			An important part of serious apps is localization. Angular's locale aware filters and stemming directives give you building blocks to make your application available in all locales.
		
	*** Embed and Inject ***
		* Embeddable
			AngularJS works great with other technologies. Add as much or as little of AngularJS to an existing page as you like. Many other frameworks require full commitment.
			Because AngularJS has no global state multiple apps can run on a single page without the use of iframes.
		* Injectable
			The dependency injection in AngularJS allows you to declaratively describe how your application is wired. This means that your application needs no main() method which is usually an unmaintainable mess. 
			Dependency injection is also a core to AngularJS. This means that any component which does not fit your needs can easily be replaced.
		* Testable
			AngularJS was designed from ground up to be testable. It encourages behavior-view separation, comes pre-bundled with mocks, and takes full advantage of dependency injection. 
			It also comes with end-to-end scenario runner which eliminates test flakiness by understanding the inner workings of AngularJS.
	
-> Del repo.... https://github.com/angular/angular.js

	"AngularJS lets you write client-side web applications as if you had a smarter browser. 
	It lets you use good old HTML (or HAML, Jade and friends!) as your template language and lets you extend HTML’s syntax to express your application’s components clearly and succinctly. 
	It automatically synchronizes data from your UI (view) with your JavaScript objects (model) through 2-way data binding.
	To help you structure your application better and make it easy to test, AngularJS teaches the browser how to do dependency injection and inversion of control.

	Oh yeah and it helps with server-side communication, taming async callbacks with promises and deferreds. 
	It also makes client-side navigation and deeplinking with hashbang urls or HTML5 pushState a piece of cake.
	The best of all: it makes development fun!"

-> De wikipedia....	http://en.wikipedia.org/wiki/AngularJS

	"AngularJS, commonly referred to as Angular, is an open-source web application framework maintained by Google and a community of individual developers and corporations to address many of the challenges encountered in developing single-page applications. 
	Its goal is to simplify both development and testing of such applications by providing a framework for client-side model–view–controller (MVC) architecture, along with components commonly used in rich internet applications.

	The library works by first reading the HTML page, which has embedded into it additional custom tag attributes. 
	Those attributes are interpreted as directives telling Angular to bind input or output parts of the page to a model that is represented by standard JavaScript variables. 
	The values of those JavaScript variables can be manually set within the code, or retrieved from static or dynamic JSON resources.	"
	
	* Two-way data binding
		AngularJS' two-way data binding is its most notable feature, and it reduces the amount of code written by relieving the server backend of templating responsibilities. 
		Instead, templates are rendered in plain HTML according to data contained in a scope defined in the model. 
		The $scope service in Angular detects changes to the model section and modifies HTML expressions in the view via a controller. 
		Likewise, any alterations to the view are reflected in the model. This circumvents the need to actively manipulate the DOM and encourages bootstrapping and rapid prototyping of web applications.
		AngularJS detects changes in models by comparing the current values with values stored earlier in a process of dirty-checking, unlike Ember.js and Backbone.js which trigger listeners when the model values are changed.
		
	* Comparisons to Backbone.js  <=============================================
		- Data-binding
			The most prominent feature that separates the two libraries is in the way models and views are synchronized. 
			Whereas AngularJS supports two way data-binding, Backbone.js relies heavily on boilerplate code to harmonize its models and views.
		- REST
			Backbone.js communicates well with RESTful backends. A very simple use of REST APIs is also available with AngularJS using the $resource service. 
			AngularJS also provides a $http service which is more flexible, connecting to remote servers either through a browser's XMLHttpRequest object or via JSONP.
		- Templating
			AngularJS templating uses a combination of customizable HTML tags and expressions. Backbone.js ships with underscore.js's utility function template() and also integrates with different templating engines such as Mustache.
		
--> GUÍA OFICIAL		
	* ¿Qué es Angular?	https://docs.angularjs.org/guide/introduction		<=== VER
		AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. 
		ngular's data binding and dependency injection eliminate much of the code you would otherwise have to write. 
		And it all happens within the browser, making it an ideal partner with any server technology.
	* A complete client-side solution
		Angular is not a single piece in the overall puzzle of building the client-side of a web application. It handles all of the DOM and AJAX glue code you once wrote by hand and puts it in a well-defined structure. 
		This makes Angular opinionated about how a CRUD application should be built. But while it is opinionated, it also tries to make sure that its opinion is just a starting point you can easily change. 
		Angular comes with the following out-of-the-box:
			- Everything you need to build a CRUD app in a cohesive set: data-binding, basic templating directives, form validation, routing, deep-linking, reusable components, dependency injection.
			- Testability story: unit-testing, end-to-end testing, mocks, test harnesses.
			- Seed application with directory layout and test scripts as a starting point.

*** CONCEPTUAL OVERVIEW: 	
	https://docs.angularjs.org/guide/concepts		<=== VER		
	
	> TEMPLATES - https://docs.angularjs.org/guide/templates
		HTML with additional markup (Angular-specific elements and attributes)
		Angular combines the template with information from the model and controller to render the dynamic view that a user sees in the browser.	
		
	Kinds of new markup...
		> DIRECTIVES - https://docs.angularjs.org/guide/directive
			extend HTML with custom attributes and elements
			- Custom directives to access the DOM: In Angular, the only place where an application should access the DOM is within directives. 
			If you need to access the DOM directly you should write a custom directive for this
			
		> {{ expression | filter }} 
			When the compiler encounters this markup, it will replace it with the evaluated value of the markup
			> EXPRESSIONS - https://docs.angularjs.org/guide/expression
				access variables and functions from the scope
			> FILTER - https://docs.angularjs.org/guide/filter
				formats the value of an expression for display to the user 
				
		> FORMS - https://docs.angularjs.org/guide/forms
			Controls (input, select, textarea) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.
			
	> COMPILER - https://docs.angularjs.org/guide/compiler
		parses the template and instantiates directives and expressions
		
	> VIEW
		what the user sees (the rendered DOM)	

	> MODEL 
		the data shown to the user in the view and with which the user interacts - values that are stored in variables on the scope	
	
	> SCOPE - https://docs.angularjs.org/guide/scope
		context where the model is stored so that controllers, directives and expressions can access it
		scope is an object that refers to the application model. It is an execution context for expressions 
		exposes model to templates
		
	> DATA BINDING - https://docs.angularjs.org/guide/databinding
		sync data between the model and the view - the DOM will be automatically updated whenever the model changes (variables or result of functions)
	
	> CONTROLLER - https://docs.angularjs.org/guide/controller 
		the business logic behind views - The purpose of controllers is to expose variables and functionality to expressions and directives.
		a Controller is a JavaScript constructor function that is used to augment the Angular Scope.
	
	> DEPENDENCY INJECTION (DI) - https://docs.angularjs.org/guide/di
		Creates and wires objects and functions - Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.
		Everything within Angular (directives, filters, controllers, services, ...) is created and wired using dependency injection.
		The Angular injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested.
	
	> INJECTOR
		dependency injection container
	
	> MODULE - https://docs.angularjs.org/guide/module
		a container for the different parts of an app including controllers, services, filters, directives which configures the Injector
	
	> SERVICES - https://docs.angularjs.org/guide/services
		reusable business logic independent of views - When the application grows it is a good practice to move view independent logic from the controller into a so called "service"
		Angular services are substitutable objects that are wired together using dependency injection (DI).
		You can use services to organize and share code across your app. Angular services are:
			- Lazily instantiated – Angular only instantiates a service when an application component depends on it.
			- Singletons – Each component dependent on a service gets a reference to the single instance generated by the service factory.
		Angular offers several useful services (like $http), but for most applications you'll also want to create your own.
		Like other core Angular identifiers, built-in services always start with $ (e.g. $http).
		--> there are multiple ways to define their factory
		
	¿Cuándo usar Controllers, Services or Directives?	
		http://kirkbushell.me/when-to-use-directives-controllers-or-services-in-angular/	
	
	** SEGURIDAD: https://docs.angularjs.org/guide/security	

	** PRODUCCION: https://docs.angularjs.org/guide/production
	
******* LINKS útiles  *************************************************************************	

=====>>> https://docs.angularjs.org/guide <<<==========

==> Características, features, ventajas, razones para usar
	http://www.wintellect.com/devcenter/jlikness/10-reasons-web-developers-should-learn-angularjs
	http://www.sitepoint.com/10-reasons-use-angularjs/
	http://code.tutsplus.com/tutorials/5-awesome-angularjs-features--net-25651  <=======================  VER!
		- Two Way Data-Binding
		- Templates 
		- MVC (MVVM). Model - ViewModel - Controller - View
		- Dependency Injection
		- Directives
		- Testing

->  http://arvindr21.github.io/ng-overview/#/
		- S.P.A. (Single Page Application)
		- MVC vs MVP vs MVVM  (ver imagenes en Investigacion/MVW)
			- One-way data binding  
			- Two-way data binding
							Ejemplo data binding 	http://arvindr21.github.io/ng-overview/examples/example1.html
		- MODULES, VIEWS & CONTROLLERS	- Ejemplo	http://arvindr21.github.io/ng-overview/examples/example2.html
		- FILTERS 						- Ejemplo	http://arvindr21.github.io/ng-overview/examples/example3.html
		- TEMPLATING & ROUTING 			- Ejemplo	http://arvindr21.github.io/ng-overview/examples/example4.html
		- SERVICES & FACTORY 			- Ejemplo	http://arvindr21.github.io/ng-overview/examples/example5.html		

==> Angular a producción   	https://github.com/jacarma/ngpro/wiki	<======================================== VER
	Workflow - Tutorial Angular - Yeoman - Testing - Empaquetado
	
-> Links conceptos generales	https://github.com/jmcunningham/AngularJS-Learning/blob/master/ES-ES.md

=> ¿Qué es AngularJS? http://carlosazaustre.es/blog/empezando-con-angular-js/ <==
	Primeros pasos para aprenderlo	http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/
		1. Tutorial Oficial	~4hrs		http://docs.angularjs.org/tutorial
		2. Video-Tutoriales de Egghead.io. ~3hrs	https://egghead.io/technologies/angularjs
		3. Un vistazo a una Aplicación AngularJS real ~4hrs		https://github.com/angular-app/angular-app
			- Folder structure (important!) - Modules (very important!) - Testing (super important!)
			- RESTful services - Navigation - Security
			Aplicación 100% MEAN !:)
			-> fantastic Grunt.js build with an integrated Karma Test Runner.
		4. Crea tu primera aplicación con Ng-Boilerplate.	https://github.com/joshdmiller/ng-boilerplate
			ng-boilerplate, unlike the angular-seed project, is suitable as a starting point for building a production app. It’s a solid shortcut, and worth study.
			(angular-seed es para aprender la tecnologia - ng-boilerplate sirve para produccion)
	

-> Fun with AngularJS! 	http://devgirl.org/2013/03/21/fun-with-angularjs/

====> CONTRAS DE ANGULARJS  	https://medium.com/@mnemon1ck/why-you-should-not-use-angularjs-1df5ddf6fc99
		(Ver links al final)

==> Pensar en AngularJS teniendo un background de JQuery 	<=====
		http://stackoverflow.com/questions/14994391/thinking-in-angularjs-if-i-have-a-jquery-background
	
-> Tips, good practices...
	http://leftshift.io/8-tips-for-angular-js-beginners/
	http://pabloleone.com/2014/05/angularjs-good-practices/

-> Slides	AngularJS 101 - Everything you need to know to get started
		http://www.slideshare.net/sbegaudeau/angular-js-101-everything-you-need-to-know-to-get-started
-> Slides AngularJS Architecture 	http://www.slideshare.net/EyalV/angularjs-architecture	

-> http://ng-course.org/demos/index.html	




***************** ELEMENTOS, FUNCIONES, FUNCIONAMIENTO ************************************************

-> Inicialización:  <html ng-app="modulo">		
	Tells AngularJS to be active in this portion of the page. In this case the entire document
	When Angular starts, it will use the configuration of the module with the name defined by the ng-app directive, including the configuration of all modules that this module depends on.

-> {{ }} are a declarative way of specifying data binding locations in the HTML.		
	
ETIQUETAS HTML (DIRECTIVAS)

	=> ng-app	
		Declares the root element of an AngularJS application, under which directives can be used to declare bindings and define behavior
	
	=> ng-model="data.attr"
		This links the <element> and the model. This means that any changes to the control update the data in your model, and when you change the model it updates the control.
		(establishes a two-way data binding between the view and the scope.)
	
	=> ng-controller="MiControlador"	
		El comportamiento del <elemento> con esa etiqueta será manejado por la clase MiControlador definida en javascript
		(Specifies a JavaScript controller class that evaluates HTML expressions.)
		
	=> ng-view
		We’re marking this <element> as the place we’ll load partial pages or “views”. The surrounding page will stay static while we load changing UI into this section.	
		(The base directive responsible for handling routes that resolve JSON before rendering templates driven by specified controllers.)
	
	=> ng-click="funcion()"
		Instead of registering event-handlers, you declare which method on the controller to call.
		
	=> ng-repeat="elem in collection"
		Use ng-repeat to unroll a collection. This is one of the most versatile directives in AngularJS.
		Instantiate an element once per item from a collection.
		Por ejemplo, usado en un <li>:
			When objects are added to the collection the ng-repeat automatically adds new <li> elements into the DOM. Similarly when the objects are removed from collection then the corresponding <li> element is removed as well. 
			(data-binding: ng-repeat actualiza el DOM cuando se modifica collection)
		
	=> ng-submit="funcion()"
		Intercepts form submission and instead calls funcion(). 
		
	-> ng-class:"{clas: condition1 && condition2}"
		Agrega al elemento la clase class cuando se cumple la condicion
	-> ng-show:"condition1 && condition2"
		Muestra <element> cuando se cumple una condicion. (por ej, las variables condition1 y condition2 son true)
	-> ng-disabled:"condition"
		Disable <element> cuando se cumple una condicion (por ej, la variable condition es true)	
		
VARIABLES JAVASCRIPT (BUILT-IN SERVICES)
	
	=> $scope
		contains your model data (y funciones). It is the glue between the controller and the view. The $scope is just one of the services that can be injected into the controller.
		
	=> $location	-	https://docs.angularjs.org/guide/$location
		You use the $location service to access the browser's location	
		- $location.path('/...')	
			Use the path method to change the application's 'deep-linking' location. 
			Changing the URL will automatically activate the new route, and transition the application to display that view
	
	=> $routeProvider
		responsible for mapping URL paths to partials.
	=> $routeParams
		We use it to access the parameters extracted from the route path definitions.
		
	=> $http	
		a built-in service provided by Angular for accessing a server backend. 
		The $http service is a core Angular service that facilitates communication with the remote HTTP servers via the browser's XMLHttpRequest object or via JSONP.
		
	-> $locale
		The $locale service contains meta-data for the current locale	
	
FUNCIONES		
		
	=> angular.module('modulo', ...)
		This defines the project module. You use modules to configure existing services, and define new services, directives, filters, and so on.

	=> value: angular.module(...).value('name',value ) 
		Define a singleton object that can be injected into controllers and services.
		
	=> service: angular.module(...).service(name, constructor)
		Register a service constructor, which will be invoked with new to create the service instance
		
	=> factory: angular.module(...).factory(name, $getFn) 
		Register a service factory, which will be called to return the service instance. 
		
		http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory	

	=> controller:  angular.module(...).controller('MiControlador',constructor )		constructor: [...,... ]  o function()
		registra el controlador 'MiControlador'
		The controller MiControlador is the code behind the view. You can clearly see your application behavior because there is no DOM manipulation or framework specific boilerplate. Just simple, readable JavaScript.
		Si se pasa un arreglo como constructor:
			The array first contains the names of the service dependencies that the controller needs. 
			The last entry in the array is the controller constructor function.
		
	=> config: angular.module(...).config(function($service) { .... })
		You use config() to configure existing services.
		Use this method to register work which needs to be performed on module loading.
		
	=> directive: angular.module(...).('name',function(...){ }	)
		Define new HTML vocabulary for our components	(Register a new directive with the compiler)
	
		
***************** TIPS & TRICKS ***********************************************************************
Investigacion/AngularJS/Advanced tips & tricks using AngularJS.pdf  (http://es.slideshare.net/simonguest/advanced-tips-tricks-for-using-angular-js)

//ToDo ///////////////////////

	10. STRUCTURE - How should I structure my angularJS project?
		- Yeoman
		....

	9. MINIFICATION - Should I minify my angular project?
		...

	8. DIRECTIVES  - What are they?
		...

	7. PAGE LOADING - How do I create a good user experience?
		....
		
	6. INTERNET EXPLORER - Does AngularJS work with IE?
		....

	5. DEVELOPMENT ENVIRONMENT	- What tools should I be using?
		- Sublime
		- Instal via Bower
		- Logging: usar $log
		- Chrome extension: Batarang
		- Javascript debugging
	
	4. ANGULAR-SUPPORTED FRAMEWORKS - How do I deal with nonAngularJS stuff?
		- Bootstrap
		- JQuery
		
	3. SEPARATION OF CONCERNS - How do I make the right choices?	
		....
		
	2. SCOPE - What do I need to know about $scope?	
		....
		
	1. PERFOMANCE - How do I prevent performance bottlenecks?	
		....

****************TUTORIALES - EJEMPLOS******************************************************************************

**** TUTORIAL OFICIAL - angular-phonecat - https://docs.angularjs.org/tutorial
->ejemplos/angular/angular-phonecat
	Repo: https://github.com/angular/angular-phonecat
	> Para aprender a...
	- Create a dynamic application that works in all modern browsers
	- Use data binding to wire up your data model to your views.
	- Create and run unit tests, with Karma.
	- Create and run end to end tests, with Protractor.
	- Move application logic out of the template and into Controllers.
	- Get data from a server using Angular services. - how to use dependency injection and services to make common web tasks, such as getting data into your app
	- Apply animations to your application, using ngAnimate.	
	> Pasos:
	
	

* Ejemplos del sitio home oficial	https://angularjs.org/
->ejemplos/angular/basics		>>> VER COMENTARIOS EXPLICATIVOS EN EL CÓDIGO
	** The Basics: Hello World	> Video: http://youtu.be/uFTFsKmkQnQ  (compara JQuery vs Angular)
		->helloworld.html
	** Add Some Control: ToDo	> Video: http://youtu.be/WuiHuZq_cg4
		->todo.html
			- Data binding, controller 
	** Wire up a Backend	
		->projects.html
			- Backend (con Firebase), routing - deep linking, services, form validation
	** Create Components
		->localization-pluralization.html
			- Directivas: etiquetas personalizadas (reusable components). Localizacion y pluralizacion (idiomas). 
				Definicion de directivas, y controlador en dos modulos distintos
				
* Ejemplos guía oficial	- Conversión de monedas	https://docs.angularjs.org/guide	
->ejemplos/angular/basics/guide		
	** Data-binding basico 	https://docs.angularjs.org/guide/concepts#a-first-example-data-binding
		->data-binding-basic.html
	** Adding UI logic: Controllers	https://docs.angularjs.org/guide/concepts#adding-ui-logic-controllers
		->controller.html
			- Controlador contiene toda la lógica
	** View independent business logic: Services	https://docs.angularjs.org/guide/concepts#view-independent-business-logic-services
		->services.html
			- Conversión de monedas en un servicio - Dependency injection
	** Accessing the backend	https://docs.angularjs.org/guide/concepts#accessing-the-backend	
		->backend.html	
			- Servicio de conversión de monedas: usa API de Yahoo
			
*** Angularjs – A Hands On tutorial			<================
	Blog: http://thejackalofjavascript.com/angularjs-hands-on-tutorial/
	Repo: https://github.com/arvindr21/ngMovieStub
		Paso a paso: https://github.com/arvindr21/ngMovieStub/tree/master/tutorial-parts
	Demo: http://moviestub.cloudno.de/

*** ToDoMVC	http://todomvc.com/		<===================
	* AngularJS • TodoMVC
	-> ejemplos/angular/todomvc/angularjs
		Demo: http://todomvc.com/examples/angularjs
		Repo: https://github.com/tastejs/todomvc/tree/gh-pages/examples/angularjs
		
	* AngularJS Performance Optimized • TodoMVC
	-> ejemplos/angular/todomvc/angularjs-perf
		Demo: http://todomvc.com/examples/angularjs-perf/#/
		Repo: https://github.com/tastejs/todomvc/tree/gh-pages/examples/angularjs-perf
			"The normal AngularJS TodoMVC implementation performs deep watching of the todos array object. This means that it keeps an in-memory copy of the complete array that is used for dirty checking in order to detect model mutations. 
			For smaller applications such as TodoMVC, this is completely fine as one trades off a little memory and performance for the sake of simplicity.
			In larger more complex applications however, where one might be working with 100s or 1000s of large objects one definitely should avoid using this approach. 
			This implementation of the AngularJS app demonstrates the correct way to approach this problem when working in larger apps."
	
	* AngularJS & RequireJS • TodoMVC
	-> ejemplos/angular/todomvc/angularjs_require
		Demo: http://todomvc.com/examples/angularjs_require
		Repo: https://github.com/tastejs/todomvc/tree/gh-pages/examples/angularjs_require
		
	* Firebase & AngularJS Realtime	• TodoMVC
	-> ejemplos/angular/todomvc/firebase-angular
		Demo: http://todomvc.com/examples/firebase-angular
		Repo: https://github.com/tastejs/todomvc/tree/gh-pages/examples/firebase-angular
		
*** AngularJS CRUD application demo				<================ VER  
	Repo: https://github.com/angular-app/angular-app	
	> Stack
		- Persistence store: MongoDB hosted on MongoLab
		- Backend: Node.js
		- Awesome AngularJS on the client
		- CSS based on Twitter's bootstrap
	> Build
		- powered by Grunt.js
		- test written using Jasmine syntax
		- test are executed by Karma Test Runner (integrated with the Grunt.js build)
		- build supporting JS, CSS and AngularJS templates minification
		- Twitter's bootstrap with LESS templates processing integrated into the build
		- Travis-CI integration
		
	
=> Tutoriales varios: http://angular.org.il/tutorials/	
	
* Tutorial de AngularJS. Ejemplo de aplicación web conectada a una API REST con Node
	Blog: http://carlosazaustre.es/blog/tutorial-ejemplo-de-aplicacion-web-con-angular-js-y-api-rest-con-node/
	
* Wine Cellar  (versión vieja Angular)
	Blog: http://coenraets.org/blog/2012/02/sample-application-with-angular-js/
	Repo: https://github.com/ccoenraets/angular-cellar
	Demo: http://coenraets.org/angular-cellar

* Employee Directory 
	* AngularJS: Sample Mobile Application with AngularJS
		Blog: http://coenraets.org/blog/2013/11/sample-mobile-application-with-angularjs/
		Repo: https://github.com/ccoenraets/angular-directory
		Demo: http://coenraets.org/apps/angular-directory/	
			- Topcoat

	* IONIC + AngularJS: Sample Mobile Application with Ionic and AngularJS
		Blog: http://coenraets.org/blog/2014/02/sample-mobile-application-with-ionic-and-angularjs/
		Repo: https://github.com/ccoenraets/directory-angular-ionic
		Demo: http://coenraets.org/apps/directory-angular-ionic/#/employees
		

* End to End Testing with Protractor
	Blog: http://thejackalofjavascript.com/end-to-end-testing-with-protractor
		Con explicaciones de testing		