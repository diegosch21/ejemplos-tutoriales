*********BACKBONE*************  (MVC Javascript)
http://backbonejs.org/

Backbone.js is a JavaScript library with a RESTful JSON interface and is based on the model–view–presenter (MVP) and Actor model application design paradigm. 
Backbone is known for being lightweight, as its only dependency is on one JavaScript library, Underscore.js. 
It is designed for developing single-page web applications, and for keeping various parts of web applications (e.g. multiple clients and the server) synchronized
(http://en.wikipedia.org/wiki/Backbone.js)

=> VER http://arvindr21.github.io/backbonejs   (Muy buena sintesis de conceptos y ejemplos)

EJEMPLOS Y TUTORIALES en Backbone - ejemplos-tutoriales.txt
	Destacados tienen esto:   <===========

===============================================================================================================================

*****************************************************************************

Backbone.js is a lightweight framework that lets us create single page applications in a structured manner. 
It is based on the Model-View-Controller (MVC) pattern. It is best suited for creating single page applications using a RESTful service for persisting data.

Backbone.js gives structure to web applications by providing models with key-value binding and custom events, 
collections with a rich API of enumerable functions, views with declarative event handling, 
and connects it all to your existing API over a RESTful JSON interface.


http://elijahmanor.github.io/talks/intro-to-backbonejs

http://arvindr21.github.io/backbonejs		<=======================

*************************************************************************	

==> FAST FACTS
	- Core components: Model, View, Collection, Router. Enforces its own flavor of MV*
	- Event-driven communication between Views and Models. As we’ll see, it’s relatively straight-forward to add event listeners to any attribute in a Model, giving developers fine-grained control over what changes in the View
	- Supports data bindings through manual events or a separate Key-value observing (KVO) library
	- Support for RESTful interfaces out of the box, so Models can be easily tied to a backend
	- Extensive eventing system. It’s trivial to add support for pub/sub in Backbone
	- Prototypes are instantiated with the new keyword, which some developers prefer
	- Agnostic about templating frameworks, however Underscore’s micro-templating is available by default
	- Clear and flexible conventions for structuring applications. Backbone doesn’t force usage of all of its components and can work with only those needed

	* Self-contained building blocks
		Backbone.js provides several classes (Model, Collection, View, Router) that you can extend to define the building blocks of your application. 
		To build an app with Backbone.js, you first create the Models, Collections, and Views of your application. 
		You then bring these components to life by defining a “Router” that provides the entry points of your application through a set of (deep-linkable) URLs.
	* Data Binding
		With Backbone.js, you bind Views to Models so that when a Model’s data changes, all the Views bound to that Model automatically re-render. No more complex UI synchronization code.
		
		Every thing inside the framework is actually an event dispatcher. 
		And because the model is changed with setters, the framework knows when the data is updated and can notify the rest of the system for that. 
		Once you bind something to these notifications, your application will react on the changes in the model. This is a really powerful feature in Backbone.js.
		
	* Elegant REST Integration
		Backbone.js also provides a natural / magical / elegant integration with RESTful services. If your back-end data is exposed through a pure RESTful API, retrieving (GET), creating (POST), updating (PUT), and deleting (DELETE) models is incredibly easy using the Backbone.js simple Model API.
	
Backbone's only hard dependency is Underscore.js ( >= 1.5.0). For RESTful persistence, history support via Backbone.Router and DOM manipulation with Backbone.View, include jQuery, and json2.js for older Internet Explorer support. (Mimics of the Underscore and jQuery APIs, such as Lo-Dash and Zepto, will also tend to work, with varying degrees of compatibility.)

Backbone.js has hard dependency on underscore.js and a soft dependency on jQuery. It’s made up of the following modules:
	Views
	Events
	Models
	Collections
	Routers
	
	
==> EVENTS
	Backbone.Events
	Este es el módulo que se usa para trabajar con eventos en el framework, Backbone.Events y puede implementarse sobre cualquier objeto, no necesariamente objetos de Backbone, sino cualquier objeto Javascript en general. 
	Gracias a su funcionalidad tendremos la posibilidad, entre otras cosas, de crear eventos personalizados, asignando funciones manejadoras y de desatar (invocar, disparar) esos eventos personalizados.		
	
	Para definir un evento sobre un objeto tenemos primero que extender dicho objeto con la clase Backbone.Events, para que podamos asignarle luego esos eventos personalizados.
	//creo un objeto cualquiera con Javascript, usando notación JSON
	var objeto = {};
	//extiendo ese objeto con la clase Backbone.Events  (usando Underscore)
	_.extend(objeto, Backbone.Events);
	
	* on(): asignar una función manejadora de eventos sobre un objeto, para un evento cualquiera.
		objeto.on(event, callback, [context])			alias:  objeto.bind
			Cuando ocurre event en ese objeto, se ejecuta callback
			(puede ser en un model, collection, view...)
	* trigger(): para disparar eventos
		objeto.trigger(event, "valor1", "valor2");	
	
==> MODELS
	http://backbonetutorials.com/what-is-a-model/
	Models are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: 
		conversions, validations, computed properties, and access control.
	You extend Backbone.Model with your domain-specific methods, and Model provides a basic set of functionality for managing changes.
	
	To create a Model class of your own, you extend Backbone.Model and provide instance properties, as well as optional classProperties to be attached directly to the constructor function.
		var MiModelo = Backbone.Model.extend({
			defaults: {
				atributo1: '',
				atributo2: true,
				..
			}
			iniatilize: function() {  } se ejecuta al instanciar el modelo
			...
			
		});
	extend correctly sets up the prototype chain, so subclasses created with extend can be further extended and subclassed as far as you like.
		var ModeloMejorado = MiModelo.extend({
			...
		});	
	Para ejecutar una funcion cuando hay un cambio en el modelo...
		(En el constructor del modelo (initialize)):
		this.on('change',function() {...})
	Para escuchar cambio en solo un atributo del modelo:
		this.on('change:atributo',function(){..})
			
	Se puede validar el seteo de atributos
	* validate: function(attributes){
		if(attributes.title === undefined){
			return "Remember to set a title for your todo.";
		}
	}
	en iniatilize...
		 this.on("invalid", function(model, error){
			console.log(error);
		})
		
	REST - Persistencia:	
		
	* save()  model.save([attributes], [options]) 
		Save a model to your database (or alternative persistence layer), by delegating to Backbone.sync	
		model1.save(); // sends HTTP PUT to /collection/model1
	* destroy() model.destroy([options]) 	
		Destroys the model on the server   
		model1.destroy(); // sends HTTP DELETE to /collection/model1 and removes from collection
		
	(Ambos métodos hacen request vía HTTP a la API... salvo que se redefina y se usa localstorage porej)	
		



==> COLLECTION
	Collections are ordered sets of models. You can bind "change" events to be notified when any model in the collection has been modified, 
	listen for "add" and "remove" events, fetch the collection from the server, and use a full suite of Underscore.js methods.
	Any event that is triggered on a model in a collection will also be triggered on the collection directly, for convenience. 
	This allows you to listen for changes to specific attributes in any model in a collection, for example: documents.on("change:selected", ...)
	
	var Library = Backbone.Collection.extend({
		model: Book
	});		
	
	* add	http://backbonejs.org/#Collection-add
	* remove
	* set: collection.set(models, [options]) 
		The set method performs a "smart" update of the collection with the passed list of models. 
		If a model in the list isn't yet in the collection it will be added; if the model is already in the collection its attributes will be merged; and if the collection contains any models that aren't present in the list, they'll be removed. 
		All of the appropriate "add", "remove", and "change" events are fired as this happens. Returns the touched models in the collection
	* reset
		collection.reset([models], [options]) 
		Reinicializar colleccion
		// we can listen for reset events
		TodosCollection.on("reset", function() {
			console.log("Collection reset.");
		});
	
	Se puede escuchaar cambios en la coleccion con this.on	
		
	REST - Persistencia:
	
	* create
		collection.create(attributes, [options]) 
		Convenience to create a new instance of a model within a collection. 
	-->	Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. 
		Returns the new model.}
		collection.create({attr1: "blabla", attr2: true}); // sends HTTP POST to /collection and adds to collection
	* fetch
		collection.fetch([options]) 
		Fetch the default set of models for this collection from the server, setting them on the collection when they arrive. (haciendo set() de cada model en el collection)
			
		The behavior of fetch can be customized by using the available set options. For example, to fetch a collection, getting an "add" event for every new model, and a "change" event for every changed existing model, without removing anything: collection.fetch({remove: false})
		collection.fetch(); // sends HTTP GET to /collection
	(Ambos métodos hacen request vía HTTP a la API... salvo que se redefina y se usa localstorage porej)	
	
	

==> VIEWS
	Backbone views are used to reflect what your applications' data models look like. 
		
	Backbone views are almost more convention than they are code — they don't determine anything about your HTML or CSS for you, and can be used with any JavaScript templating library. 
	The general idea is to organize your interface into logical views, backed by models, each of which can be updated independently when the model changes, without having to redraw the page	
	
	http://backbonetutorials.com/what-is-a-view/
	var MiVista = Backbone.View.extend({
		el: ...  The "el" property references the DOM object created in the browser. 
		render: function() {  }   The "render()" function will load our template into the view's "el" property using jQuery.   
	-->	events:  {   
					"click input[type=button]": "doSearch",		// cuando hay click en el input, se ejecuta la funcion doSearch
					...
			}  To attach a listener to our view, we use the "events" attribute of Backbone.View. Remember that event listeners can only be attached to child elements of the "el" property
		template: _.template(...)		it's often a nice convention to define a template function on your views. In this way, when rendering your view, you have convenient access to instance data.
		...
		doSearch: function() { .. }
	});	
	There are 4 basic properties in a view: el, initialize, render, and events.
	Properties like tagName, id, className, el, and events may also be defined as a function, if you want to wait to define them until runtime.

	* template (underscore): _.template(templateString, [data], [settings])
	
	* view.el
		Every view needs to reference a DOM at all times. Therefore, the view will inject content into this element. This is the el property. 
		this.el is created from view’s el,tagName, className, id or attributes properties. If none of these are specified, then this.el is an empty div. 
		The view.$el it’s a cached jQuery object of the view’s element (view.el).
			Se puede poner por ejemplo la propiedad tagName: li, en lugar de el. De esa forma se renderizará dentro de <li></li>
		
		this.$el is an object created by the framework and every view has it by default (there is a $ infront of el because we have jQuery included). 	

		Por ej, en render...
			this.$el.html( this.template( this.model.toJSON() ) );
				
	* Initialize/construtor
		Here you have the option to pass parameters that will be attached to a model, collection or view.el.
	* render
		This function injects the markup into the elements. Not all views require having a render function, they can call other view’s render functions.
	* delegated events
		In Backbone.js the event's definition is a just a hash. 
		You firstly type the name of the event and then a selector. The values of the properties are actually methods of the view.	
		{"<EVENT_TYPE> <ELEMENT_ID>": "<CALLBACK_FUNTION>"}
		Ej:
			events: {'keypress #new-todo': 'createTodoOnEnter'}
		En JQuery sería esto:
			$('#new-todo').keypress(createTodoOnEnter);
		
		
			
	
	When we instanciate the views, they can receive any parameter that we need. Por ejemplo, el model.
	
	* _.bind, _.bindall: para que this apunte a lo que se desee
		http://blog.bigbinary.com/2011/08/18/understanding-bind-and-bindall-in-backbone.html
		
		BIND:
			window.ProductView = Backbone.View.extend({
			  initialize: function() {
				this.model.on('change', _.bind(this.render, this));
			  }
			});
			Al llamar al método render de esa vista, cuando el modelo cambie, el valor de this será la vista
			(_.bind produce una nueva funcion que es la que se enlaza al evento de change)
	
		BINDALL:
			window.ProductView = Backbone.View.extend({
			  initialize: function() {
				_.bindAll(this, this.render);
				this.model.on('change', this.render);
			  }
			});
			Mismo efecto que en la anterior. 
			Pero se modifica el método render para que siempre el valor de this sea esa vista
			
	* CERRAR VISTAS AL CAMBIARLAS!
	Por ej, en el router:	
			showView: function(selector, view) {
				if (this.currentView)
					this.currentView.remove();
				$(selector).html(view.render().el);
				this.currentView = view;
				return view;
			}

	

==> SYNC
	Backbone.sync is the function that Backbone calls every time it attempts to read or save a model to the server. 
	By default, it uses jQuery.ajax to make a RESTful JSON request and returns a jqXHR. 
	You can override it in order to use a different persistence strategy, such as WebSockets, XML transport, or Local Storage.	
	
==> ROUTERS	
	You could build web application without using the routers. 
	However, if you want to make reference to certain ‘state’ or location of the web application, you need a reference (link/URL) to it. This is where routers come to rescue.
	
	Web applications often provide linkable, bookmarkable, shareable URLs for important locations in the app. 
	Backbone.Router provides methods for routing client-side pages, and connecting them to actions and events. 
	For browsers which don't yet support the History API, the Router handles graceful fallback and transparent translation to the fragment version of the URL
	
	In backbone, routes are hash maps that match URL patterns to functions. 
	You can use parameter parts, such as todos/:id, or using splats file/*path you will match all the parameters from the splat on. For that reason, the splat parameter should be always the last matcher.
	
	Llamar a  Backbone.history.start()  al iniciar la app
		 
	var AppRouter = Backbone.Router.extend({
		routes: {
			"help":                 "help",    // #help
			"search/:query":        "search",  // #search/kiwis
			"search/:query/p:page": "search" ,  // #search/kiwis/p7
			"posts/:id": "getPost",
		},
		help: function() {...  },
		search: function(query, page) {	...	  }
	});	 
	Dynamic routing...
		// Instantiate the router
		var app_router = new AppRouter;
		app_router.on('route:getPost', function (id) {
			// Note the variable in the route definition being passed in here
			alert( "Get post number " + id );   
		});

	* navigate()	router.navigate(fragment, [options]) 
		Funcion del router para actualizar el fragmento de html, y triggerear el router si se quiere
		Whenever you reach a point in your application that you'd like to save as a URL, call navigate in order to update the URL. 
		If you wish to also call the route function, set the trigger option to true. 
		To update the URL without creating an entry in the browser's history, set the replace option to true.
		
		
==> HISTORY
	History serves as a global router (per frame) to handle hashchange events or pushState, match the appropriate route, and trigger callbacks
		

	
==> USANDO AMD/REQUIRE.JS	
	http://backbonetutorials.com/organizing-backbone-using-modules/
	
	Extender clases: http://www.bennadel.com/blog/2320-extending-classes-in-a-modular-javascript-application-architecture-using-requirejs.htm
	
==> Evitar errores comunes:

		http://ozkatz.github.io/avoiding-common-backbonejs-pitfalls.html
		
		Usar listenTo() en lugar de on(), para que al lamar a remove() se desbindee
