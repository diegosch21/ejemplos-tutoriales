BACKBONE
******************************************************************
==> TUTORIALES - EJEMPLOS - BOILERPLATES

http://backbonetutorials.com/	

-> Lista: Tutorials, blog posts and example sites: https://github.com/jashkenas/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-> Tutorial completo: Google Task, autenticación OAuth  	<----------------- VER!!  <----------------------
	Tutorial: http://dailyjs.com/2012/11/29/backbone-tutorial-1/
	Repo: https://github.com/alexyoung/dailyjs-backbone-tutorial
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	

-> Tutorial (slides y app ejemplo contactos): Backbone - Introduction
	Slides: http://dmytroyarmak.github.io/codeangels-backbone-introduction/#/
	Demo: http://dmytroyarmak.github.io/backbone-contact-manager/#contacts
	Tutorial: https://github.com/dmytroyarmak/backbone-contact-manager/blob/gh-pages/README.md#backbone-contact-manager
		- Bootstrap

-> BOILERPLATES:
	* Backbone Boilerplate: a workflow for building Backbone.js applications.
		Repo: https://github.com/backbone-boilerplate/backbone-boilerplate
		
	* Super Simple Backbone Starter Kit / Boilerplate
		http://webapplog.com/super-simple-backbone-starter-kit-boilerplate/
		https://github.com/azat-co/super-simple-backbone-starter-kit
		- RequireJS 2.0.2 included in /libs
		- RequireJS Text plug-in 2.0.0 included in /libs
		- jQuery 1.10.2 hot-linked from Google APIs
		- Backbone 1.1.0 hot-linked from CDNJS
		- Underscore 1.5.2 hot-linked from CDNJS
		- Twitter Bootstrap 3.0.2 included in /css, /img, /js	
	

-> ToDoMVC	http://todomvc.com/		<=================================================
	** Backbone.js • TodoMVC
	->ejemplos/backbone/todomvc/backbone			OK
		Demo: http://todomvc.com/examples/backbone/
		Repo: https://github.com/tastejs/todomvc/tree/gh-pages/examples/backbone
		Código comentado (versión anterior): http://documentcloud.github.io/backbone/docs/todos.html	
			--> Buen manejo de eventos. Router. Modularizado. Ejemplo a seguir
		
	** Backbone.js + RequireJS • TodoMVC						<==========
	->ejemplos/backbone/todomvc/backbone_require			OK
		Demo: http://todomvc.com/examples/backbone_require/
		Repo: https://github.com/tastejs/todomvc/tree/gh-pages/examples/backbone_require
		http://arvindr21.github.io/Backbone-RequireTodoApp/Backbone-RequireTodoApp.html	
			--> Uso de require.js. Templates separados (usa requirejs-text)
		


* Backbone.js for Absolute Beginners - Getting Started		
	-> Hello World (todo en 1 html): ejemplos/backbone/hello-world.html		OK
		-Part 1: Intro	
			Blog: http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/
	-> Todo App (todo en 1 html): ejemplos/backbone/todo-app.html			OK
		-Part 2: Models, Collections and Views. Events. LocalStorage. Create & Read item list
			Blog: http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/
		-Part 3: CRUD (Create-Read-Update-Delete) for the item list.
			Blog: http://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/
		-Part 4: Routers: Filtrar items completados o no
			Blog: http://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/
		Codigo final: https://github.com/amejiarosario/Backbone-tutorial/blob/master/backbone-tutorial.html

* Ejemplo lista de tareas con Backbone, RESTEasy y Tapestry (server: Java)
-> ejemplos/backbone/lista-de-tareas-backboneREST-Java
	Blog: http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html
	Repo: https://github.com/picodotdev/elblogdepicodev/tree/master/BackboneREST
			
* Single Page ToDo Application With Backbone.js		
-> ejemplos/backbone/single-page-todo-application		OK
	Tutorial: http://code.tutsplus.com/tutorials/single-page-todo-application-with-backbonejs--cms-21417}
	Repo: https://github.com/tutsplus/single-page-todo-backbone
	(No me gusta cómo está diseñada)
		- Namespacing: revealing module pattern. Definición de componentes
		- ViewsFactory: vistas menu, list (mediante route se listan archivados o no), form (para crear o editar ToDo)
		--> Le agregué localStorage
			
* Backbone.js Wine Cellar Tutorial: RESTful API, CRUD, Deep Linking and Application States (Router)
-> ejemplos/backbone/wine-cellar-tutorial/tutorial		OK
	Repo: https://github.com/ccoenraets/backbone-cellar/tree/master/tutorial
	TUTORIAL BACKBONE...
	Blog: http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/
		http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-2-crud/
		http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-3-deep-linking-and-application-states/
		http://coenraets.org/blog/2012/01/backbone-js-lessons-learned-and-improved-sample-app/
		- Template loader
		- Método close para las views. Cleaning Up: Avoiding Memory Leaks and Ghost Views
		- Método before en router. Route pre-processing (aka Filters)
	
	** Versión móvil: Sample Mobile App with Backbone.js and PhoneGap.
	-> ejemplos/backbone/wine-cellar-tutorial/tutorial/mobile/offline
		Blog: http://coenraets.org/blog/2012/02/sample-mobile-app-with-backbone-js-and-phonegap/
			Versión "consumer" (no tiene CRUD, sólo lectura)
			- Api online, no funciona
	
	** Con Bootstrap: Single-Page CRUD Application with Backbone.js and Twitter Bootstrap 		
	-> ejemplos/backbone/wine-cellar-tutorial/bootstrap		OK
		Blog: http://coenraets.org/blog/2012/05/single-page-crud-application-with-backbone-js-and-twitter-bootstrap/
		Demo: http://coenraets.org/backbone-cellar/bootstrap/
			- Persistencia:
				> in-memory datastore (default) [All the changes you make to the data will be lost the next time you access the app or hit Refresh]
					memorystore.js. Reescribe Babkcone.sync
				> RESTful back-end implemented in PHP (see the /api directory)
					 (Framework PHP: Slim)
			- Template Loader: JQuery deferred: AJAX para obtener los templates, los setea en las view, y $.when.apply con un callback cuando terminan de cargarse
			- Header View - SelectMenuItem. About View
			- Drag-and-Drop File Upload and HTML 5 File API
			- Paging: Twitter Bootstrap markup and styles are “componentized” or “widgetized” into a Backbone View: Paginator
					The entire data set is always retrieved from the server and paging is provided for a cosmetic/layout reason
			- Forms: Twitter Bootstrap's forms: WineView
			- Validation: Bootstrap’s validation markup and styles are wired with validation rules defined in the Backbone model. 
						Custom validateItem() and validateAll() methods
			- Other Twitter Bootstrap features: thumbnails, dropdowns, alerts, etc.
			>  In a real-life application, you should consider implementing a namespacing scheme to keep the global namespace clean, and other optimization techniques such as view and/or data caching.
			

* EMPLOYEE DIRECTORY: Implementaciones con Backbone.js		<================================
	(API REST (JSON y JSONP):																																	)
	(	- PHP (Slim Framework) - https://github.com/ccoenraets/directory-rest-php						->employee-directory/backbone-viejo/api-rest-php		)
	(	- NodeJS (Express Framework / MongoDB) - https://github.com/ccoenraets/directory-rest-nodejs	->employee-directory/backbone-viejo/api-rest-nodejs 	)
	
	** Backbone + Bootstrap: Sample App with Backbone.js and Twitter Bootstrap (Viejo)
	->ejemplos/backbone/employee-directory/backbone-viejo/web		OK
		Blog: http://coenraets.org/blog/2012/02/sample-app-with-backbone-js-and-twitter-bootstrap/
		Repo: https://github.com/ccoenraets/backbone-directory
		Demo: http://coenraets.org/backbone/directory/twitterbootstrap/
			- HeaderView: select menu item; search
			- One-to-Many association. A one-to-many (Manager-to-Employees) association is defined in the Employee model (model/employeemodel.js) as a collection of employees (the direct reports). That collection is lazily fetched in the render() function of EmployeeFullView (view/employeedetails.js).
			- Composite View. EmployeeFullView (views/employeedetails.js) is an example of a composite view. Its render() function instantiates two subviews: EmployeeView and EmployeeListView (to display the employee’s direct reports).
			- API REST: PHP Slim Framework   ->employee-directory/backbone-viejo/api
	
	** Backbone + Bootstrap: Sample Application with Backbone.js and Twitter Bootstrap: Updated and Improved
	->ejemplos/backbone/employee-directory/backbone-bootstrap		OK
		Blog: http://coenraets.org/blog/2013/04/sample-application-with-backbone-js-and-twitter-bootstrap-updated-and-improved/
		Repo: https://github.com/ccoenraets/directory-backbone-bootstrap
		Demo: http://coenraets.org/directory/
			- Bootstrap 2.3.1
			- TemplateLoader: setea los templates de las vistas
			Persistencia datos: (Se abstrae. Redefine Backbone.sync en cada model)
				- model-in-memory.js (In-memory data store)
				- model-rest-json.js (Backbone.js default behavior. The application gets data through RESTFul services: PHP o NodeJS)
				- model-rest-jsonp.js (If the server serving your pages and the server serving your data are on different domains, use this adapter instead to avoid the same origin policy error.)
				- model-websql.js (Uses local database using the WebSQL api.)
				- model-parse-dot-com.js (Don’t want to host your own data infrastructure? Parse.com is a cloud service that will host your data for you. Use this adapter to test your app with sample data I deployed on Parse.com)

	** Backbone + RequireJS + Bootstrap: Building Modular Web Applications with Backbone.js and RequireJS — Sample App
	->ejemplos/backbone/employee-directory/backbone-bootstrap-requirejs		OK
		Blog: http://coenraets.org/blog/2013/06/building-modular-web-applications-with-backbone-js-and-requirejs-sample-app/
		Repo: https://github.com/ccoenraets/directory-backbone-bootstrap-require
		Demo: http://coenraets.org/apps/directory-backbone-bootstrap-require/	
			REQUIREJS:	
			- Modularized model, view, router...
				Modulos con define - require, usando sintaxis "sugar": http://requirejs.org/docs/whyamd.html#sugar 
			- Require text plugin para cargar templates de archivos separados: https://github.com/requirejs/text
			- Map config (require.config({...}) en app.js)
				RequireJS allows you to centrally manage dependency mappings (using a map config) so you can easily replace the version of a module that is injected in other modules. 
				Elegir fácil entre data adapters: in-memory, json, jsonp
			
	** Backbone + Topcoat (versión móvil): Sample Mobile / PhoneGap Application with Backbone.js and Topcoat
	->ejemplos/backbone/employee-directory/backbone-topcoat		OK - PROBADA EN CELU
		Blog: http://coenraets.org/blog/2013/06/sample-mobile-phonegap-application-with-backbone-js-and-topcoat/
		Repo: https://github.com/ccoenraets/directory-backbone-topcoat
		Demo: http://coenraets.org/apps/directory/backbone/topcoat/
			- Backbone.js as the architectural framework  
			- Topcoat as the UI toolkit. Pageslider
			- Data adapters: in-memory - localstorage
		
	** Backbone + RequireJS + Topcoat (versión móvil): Building Modular Mobile/PhoneGap Apps with Backbone.js, RequireJS & Topcoat — Sample App
	->ejemplos/backbone/employee-directory/backbone-topcoat-require		OK - PROBADA EN CELU: Funciona bien. Problema: Se resalta en azul al tocar los links 
		Blog: http://coenraets.org/blog/2013/06/building-modular-mobile-phonegap-apps-with-backbone-js-requirejs-and-topcoat/
		Repo: https://github.com/ccoenraets/directory-backbone-topcoat-require
		Demo: http://coenraets.org/apps/directory-backbone-topcoat-require/

	** Backbone + Ratchet (versión móvil - ios - android): Employee Directory Sample Application with Ratchet 2.0	
	->ejemplos/backbone/employee-directory/backbone-ratchet		OK - PROBADA EN CELU (index-android, con localstorage): JOYA! (error al ocultar teclado)
		Blog: http://coenraets.org/blog/2013/06/sample-mobile-phonegap-application-with-backbone-js-and-ratchet/ (viejo)
			  http://coenraets.org/blog/2014/02/employee-directory-sample-application-with-ratchet-2-0/
		Repo: https://github.com/ccoenraets/directory-backbone-ratchet
		Demo: http://coenraets.org/apps/directory-backbone-ratchet/
			  http://coenraets.org/apps/directory-backbone-ratchet/index-android.html	
			- Ratchet: UI framework con temas para iOS o Android
			- Mismo código que versión Topcoat, sólo cambia estilos, tags HTML
			- MAP VIEW: OpenStreetMap

	** Autenticación: Backbone.js apps with Authentication Tutorial
	->ejemplos/backbone/employee-directory/login-backbone-viejo			OK
		Blog: http://clintberry.com/2012/backbone-js-apps-authentication-tutorial/
		Repo: https://github.com/clintberry/backbone-directory-auth
		* Server side authentication (JSON API en PHP): ->api-rest-php-login
			-Agrega post /login a la API. Función login(). Basado en $_SESSION de PHP
			-Funcion authorize(). Se agrega a todos los routes. Si no está logueado tira error 401, si está logueado pero no tiene permiso, error 403
		* Cliente:
			-Fork de backone-viejo
			-LoginView, y template Login. Login redirecciona a home.
			-$.ajaxSetup: para redireccionar los erroes 401 y 403
			
* Client-side authentication & session management via Backbone.js and Node.js
->ejemplos/backbone/backbone-login   (Signup y login)				<-- VER!
	Blog: http://alexehrnschwender.com/2013/07/client-side-auth-session-mgmt-backbone-node/
	Repo: https://github.com/alexanderscott/backbone-login
	Demo: http://backbone-login.crunchdevelopment.com/
		- CSRF headers in authentication requests to prevent forgery: 
			A CSRF token is essentially a means for the server to recognize the identity of the requesting client. This identity detection is used to prevent XSS (Cross-Site Scripting)
			The randomized token is generated and planted by the server in the client’s HTML meta tags (which should not be refreshed in a single-page app) or inside of a hidden form element.
			The client can then choose to include this token in the headers (more specifically a “X-CSRF-Token” header) of AJAX requests as a means of identification & authorization.
		- Signed Cookies
			Auth state persistence through SIGNED COOKIES (cookies encriptadas... del lado server)
		- Global, client-side session model
			Global (singleton) session model whose state changes can be listened to
				> If you are letting a Session Model handle authentication, it’s important to immediately purge an auth token, password, or any sensitive information immediately after it is used in a request.  Or simply avoid setting sensitive properties on the model itself, and abstracting these out to a pass-thru function in the model.
					// Fxn to update user attributes after recieving API response
						updateSessionUser: function( userData ){
							this.user.set( _.pick( userData, _.keys(this.user.defaults) ) );	//sólo guarda atributos del usuairo, no info sensible 
						},
				>  Ensure all session communication with the server is via HTTPS
				>  Wrap the Session Model in a closure, only allowing access to your other views/models inside the closure. (Con RequireJS)	
		- Client-side validations through ParsleyJS
			$("#login-form").parsley('validate')
		- Salt/hashing of passwords for back-end storage
	* Server-Side: NodeJS con Express
		A lightweight, single-file Express.js server and SQLLite3 db. Responds to API routes, as well as initial index.html page render to plant the session CSRF token.
	* Cliente: 	Backbone & Require - Bootstrap
		Uses a persistent global Backbone.js SessionModel to manage state. 
		It is also rather bare with only a couple views, a pushState-enabled router, and models for a User and a Session. 
			- Router con HTML5 pushState
		The client communicates with the server via Backbone.sync methods, which essentially just wrap standard AJAX CRUD operations.
		Views and other models all can:
			- subscribe to changes in session state
				En HeaderView: app.session.on("change:logged_in", this.onLoginStatusChange); 
			- extract current user data
				En HeaderView: "Logged in as "+app.session.user.get("username")
			- trigger auth events (login, logout, etc)
				En HeaderView: app.session.logout({});
		Utils: cookies helpers, errors and alert handling
		
* Google Maps: Using GMap in RequireJS, with Backbone
->ejemplos/backbone/googlemaps
	Blog: http://www.rockylhc.com/blog/2012/05/17/using-gmap-requirejs-backbone
	Source: http://app.rockylhc.com/static/map-app/source.zip
	Demo: http://app.rockylhc.com/projects/map-app/
	
* Backbone Weather App
->ejemplos/backbone/weather-app-backbone-amd
	Slides:  Intro to Backbone.js http://elijahmanor.github.io/talks/intro-to-backbonejs
	Repo: https://github.com/theprivileges/backbone-amd-weather	
	
* Backbone Weather Demo
->ejemplos/backbone/weather-demo-backbone-python
	Repo: https://github.com/larrymyers/backbone-weather-demo
	* Server en Python
	